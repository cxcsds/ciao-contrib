#!/usr/bin/env python
#
#  Copyright (C) 2022  Smithsonian Astrophysical Observatory
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

'Provide interactive grating coordinates'

import sys

from coords.gratings import TGPixlib
from dax.utils import xpaget, xpaset_p

def init_pixlib(xpa):
    'Setup pixlib and various xforms from header info'
    from pycrates import read_file
    infile = xpaget(xpa, "file").strip()
    tab = read_file(infile)
    keywords = {x: tab.get_key_value(x) for x in tab.get_keynames()}
    pix = TGPixlib(keywords)
    return pix


def get_region(xpa):
    '''The "lauch" script adds a special "line" region to ds9.
    It has special tag, tag={tgcoords}.  The line has an arrow
    at 1 end.  The end w/o the arrow is the 0th order location.
    The end with the arrow is the location to compute the grating
    coordinates and energy.
    '''
    inregion = xpaget(xpa, "region -format ds9 -system physical")
    magic_line = [x for x in inregion.split("\n")
                  if x.startswith("line") and 'tag={tgcoords}' in x]
    if len(magic_line) != 1:
        raise RuntimeError("Only one special gratings regions is allowed")

    # get coordinates of the line
    coords = magic_line[0].split(")")[0].split("(")[1]
    x0, y0, xx, yy = [float(x) for x in coords.split(",")]

    return (x0, y0, xx, yy)


def main():
    "Main routine"

    xpa = sys.argv[1]
    order = int(sys.argv[2])

    pix = init_pixlib(xpa)
    x0, y0, xx, yy = get_region(xpa)

    if pix.grating_keyword == "LETG":
        tg_r, tg_d = pix.sky_to_grating_angles((xx, yy), "leg",
                                               order, (x0, y0))
        energy = pix.grt_energy((tg_r, tg_d))
        arm = "LEG"
    else:
        # If HETG, then we will compute coords for both MEG and HEG.
        # We pick the one with the smallest dispersion angle (ie
        # closest).

        tg_r_m, tg_d_m = pix.sky_to_grating_angles((xx, yy), "meg",
                                                   order, (x0, y0))
        tg_r_h, tg_d_h = pix.sky_to_grating_angles((xx, yy), "heg",
                                                   order, (x0, y0))

        if abs(tg_d_m) < abs(tg_d_h):
            tg_r, tg_d = tg_r_m, tg_d_m
            arm = "MEG"
        else:
            tg_r, tg_d = tg_r_h, tg_d_h
            arm = "HEG"

        energy = pix.sky_to_grating_energy((xx, yy), arm, order,
                                           (x0, y0))

    xpaset_p(xpa, ["tcl", f"{{display_tgcoords {tg_r:.5g} {tg_d:.5g}" +
                   f" {energy:.3f} {arm}}}"])


if __name__ == "__main__":
    main()
