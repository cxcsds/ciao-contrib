#!/usr/bin/env python
# 
#  Copyright (C) 2019  Smithsonian Astrophysical Observatory
#
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
import sys
import os

import subprocess as sp
from tempfile import NamedTemporaryFile    

ROOT=os.path.join( os.environ["DAX_OUTDIR"], str(os.getpid()))


def check_unique(xpa):
    cmd = [ 'xpaaccess','-n',xpa]
    try:
        # xpaaccess returns num proc as exit status
        num = sp.run( cmd, check=False, stdout=sp.PIPE).stdout
    except:
        raise RuntimeError("Cannot access "+xpa)

    if num == '' or num is None or 0 == int(num):
        raise RuntimeError("What happened to ds9?")
    
    if int(num) != 1:
        raise RuntimeError("Multiple ({}) ds9's are running using the "+
            "same title: '{}'.  Please close the other windows "+
            "and restart.".format(num,xpa))


def save_ds9_image(xpa):
    # ds9 can crop images; but when you get the file it 
    # sends the whole thing.  We can get the crop info
    # and apply it separately. Note: I'm using image coords (#1,#2)
    # to avoid problems w/ sky vs. pos. vs (x,y).
    cmd = ['xpaget', xpa, 'crop', 'image' ]
    crop = sp.run( cmd, check=True, stdout=sp.PIPE).stdout    
    xmid,ymid,xlen,ylen = [float(x) for x in crop.split()]
    xl=xmid-xlen/2.0
    xh=xmid+xlen/2.0
    yl=ymid-ylen/2.0
    yh=ymid+ylen/2.0
    filt="[#1={}:{},#2={}:{}]".format(xl,xh,yl,yh)

    # Get fits image from ds9
    cmd = [ 'xpaget', xpa, 'fits' ]
    fits = sp.run( cmd, check=True, stdout=sp.PIPE).stdout    

    # Use dmcopy to filter on cropped region; pipe
    # fits file into dmcopy via stdin.
    ds9_file = NamedTemporaryFile(dir=os.environ["DAX_OUTDIR"], 
         suffix="_ds9.fits", delete=False)
    cmd = [ 'dmcopy', '-{}'.format(filt), ds9_file.name, "clobber=yes"]
    dmc = sp.Popen(cmd, stdin=sp.PIPE)
    dmc.stdin.write(fits)
    dmc.communicate()

    return(ds9_file.name)


def send_output_image_to_ds9(xpa, outfile):
    cmd = [ 'xpaset', '-p', xpa, 'fits', 'new', outfile ]
    fits = sp.run( cmd, check=True )
    
    from paramio import pget
    if "yes" == pget("dax", "tile"):
        cmd = [ 'xpaset', '-p', xpa, 'tile' ]
        sp.run( cmd, check=True )
    
    
def send_output_region_to_ds9(xpa, outfile):
    try:
        import pycrates as pc
        src_reg = "{}[src_region]".format(outfile)
        pc.read_file(src_reg)
        outfile = src_reg
    except Exception as e:
        pass

    cmd = ["dmlist", outfile, "counts"]
    nrows = sp.run( cmd, check=True, stdout=sp.PIPE).stdout
    if nrows.decode().strip() == '0':
        print("\n\nNo sources detected\n")
    else:
        cmd = [ 'xpaset', '-p', xpa, 'regions', 'load', outfile ]
        fits = sp.run( cmd, check=True )
    


xpa=sys.argv[1]
toolname=sys.argv[2]

check_unique(xpa)
infile = save_ds9_image(xpa)

outfile = NamedTemporaryFile(dir=os.environ["DAX_OUTDIR"], 
    suffix="_{}.fits".format(toolname), delete=False)

output_fn = send_output_image_to_ds9

from ciao_contrib.runtool import make_tool
tool = make_tool(toolname)

if hasattr(tool, "infile"):
    tool.infile=infile
if hasattr(tool, "outfile"):
    tool.outfile=outfile.name

if toolname is None:
    raise NotImplementedError("You shouldn't be here")
elif "dmimgblob" == toolname:
    tool.threshold=sys.argv[3]
    tool.srconly=True
elif "dmimgadapt" == toolname:  
    #$function $minrad $maxrad $numrad $radstep $counts 
    tool.function=sys.argv[3]
    tool.minrad=sys.argv[4]
    tool.maxrad=sys.argv[5]
    tool.numrad=sys.argv[6]
    tool.radscale=sys.argv[7]
    tool.counts=sys.argv[8]
elif "csmooth" == toolname:
    # - none - none none conmeth=fft conkern=$kernel sigmin=$sigmin 
    # sigmax=$sigmax sclmin=$sclmin sclmax=$sclmax mode=h
    tool.sclmap="none"
    tool.outsigfile="none"
    tool.outsclfile="none"
    tool.conmeth="fft"
    tool.conkerneltype=sys.argv[3]
    tool.sigmin=sys.argv[4]
    tool.sigmax=sys.argv[5]
    tool.sclmin=sys.argv[6]
    tool.sclmax=sys.argv[7]
    tool.sclmode="compute"
elif "dmimgfilt" == toolname:
    # $function $mask numiter=$niter | $image(new)    
    tool.function = sys.argv[3]
    tool.mask = sys.argv[4]
    tool.numiter = sys.argv[5]
elif "dmimgthresh" == toolname:
    tool.cut=sys.argv[3]
    tool.value = sys.argv[4]
elif "dmimggrad" == toolname:
    raise NotImplementedError("Not here yet")
elif "dmnautilus" == toolname:
    # $snr
    tool.snr = sys.argv[3]
elif "dmimgdist" == toolname:
    pass
elif "apowerspectrum" == toolname:
    tool.infilereal = infile
    tool.infileimag = "none"
elif "acrosscorr" == toolname:
    tool.infile1 = infile
    tool.infile2 = "none"
elif "aconvolve" == toolname:
    ker=sys.argv[3]
    xx=sys.argv[4]
    yy=sys.argv[5]
    meth=sys.argv[6]
    nrad=4
    kernels = { 
        "gaus"   : "lib:{ker}(2,{nrad},1,{xx},{yy})",
        "mexhat" : "lib:{ker}(2,{nrad},1,{xx},{yy})",
        "power"  : "lib:{ker}(2,{nrad},1,{xx},{yy})",
        "exp"    : "lib:{ker}(2,{nrad},1,{xx},{yy})",
        "tophat" : "lib:{ker}(2,1,{xx},{yy})",
        "box"    : "lib:{ker}(2,1,{xx},{yy})",
        "sinc"   : "lib:{ker}(2,{nrad},1,{xx})",
        "beta"   : "lib:{ker}(2,{nrad},1,{xx})",
        "cone"   : "lib:{ker}(2,1,{xx})",
        "pyramid": "lib:{ker}(2,1,{xx})",
        "sphere" : "lib:{ker}(2,{xx})",
        }

    tool.kernelspec = kernels[ker].format(ker=ker,xx=xx,yy=yy,nrad=nrad)
    tool.method=meth
elif "wavdetect" == toolname:
    output_fn = send_output_region_to_ds9
    tool.scales=sys.argv[3]
    tool.scellfile=tool.outfile+"_scell"
    tool.imagefile=tool.outfile+"_reconimg"
    tool.defnbkgfile=tool.outfile+"_nbkg"
    tool.interdir=os.environ["DAX_OUTDIR"]
    tool.expfile=sys.argv[4][1:].strip('"') # strip off leading 'e' 
    tool.psffile=sys.argv[5][1:].strip('"') # strip off leading 'p'
elif "celldetect" == toolname:
    output_fn = send_output_region_to_ds9
    tool.fixedcell=int(sys.argv[3])    
    tool.expstk=sys.argv[4][1:].strip('"') # strip off leading 'e' 
    tool.psffile=sys.argv[5][1:].strip('"') # strip off leading 'p'
    tool.thresh=float(sys.argv[6])
elif "vtpdetect" == toolname:
    tool.infile = tool.infile+"[opt type=i4]" 
    output_fn = send_output_region_to_ds9
elif "get_src_region" == toolname:
    # gsr clobber doesn't work well
    if os.path.exists( outfile.name ):
            os.unlink(outfile.name)
    output_fn = send_output_region_to_ds9
    tool.invert=True
elif "dmimglasso" == toolname:

    cmd = [ 'xpaget', xpa, 'mode']
    ch = sp.run( cmd, check=True, stdout=sp.PIPE).stdout    
    if ch.decode().strip() != "crosshair":
        print("\n***\n*** You must be in crosshair mode to use this task \n***\n")
        if os.path.exists(infile):
            os.unlink(infile)
        sys.exit()
    
    cmd = [ 'xpaget', xpa, 'crosshair', 'physical' ]
    phys = sp.run( cmd, check=True, stdout=sp.PIPE).stdout    
    xpos, ypos = phys.decode().split()

    tool.xpos = xpos
    tool.ypos = ypos
    tool.low_value = sys.argv[3]
    tool.high_value = sys.argv[4] 
    output_fn = send_output_region_to_ds9
elif "dmcontour" == toolname:
    tool.levels=sys.argv[3]
    output_fn = send_output_region_to_ds9
elif "skyfov" == toolname:
    output_fn = send_output_region_to_ds9
elif "dmellipse" == toolname:
    output_fn = send_output_region_to_ds9

    tool.fraction=sys.argv[3]
    tool.shape=sys.argv[4]

    freg = sys.argv[5]
    if len(freg):
        if freg.startswith("@"):
            import stk
            freg="+".join(stk.build(freg.replace("@","@-")))
        else:
            freg = freg.replace(";","+").replace("+-","-").rstrip("+")
        ffilt="[(x,y)={}]".format(freg)
    else:
        ffilt=""
    tool.infile=tool.infile+ffilt
elif "dmregrid2" == toolname:
    tool.xoffset=float(sys.argv[3])*-1.0
    tool.yoffset=float(sys.argv[4])*-1.0
    tool.theta=float(sys.argv[5])
    tool.xscale=float(sys.argv[6])
    tool.yscale=float(sys.argv[7])

    import pycrates as pc
    _i = pc.read_file(infile).get_image().values
    _ylen,_xlen = _i.shape

    if "INDEF" == sys.argv[8]:
        tool.rotxcenter=int(_xlen/2.0)
    else:
        tool.rotxcenter=float(sys.argv[8])
    
    if "INDEF" == sys.argv[9]:
        tool.rotycenter=int(_ylen/2.0)
    else:
        tool.rotycenter=float(sys.argv[9])

    tool.method=sys.argv[10] 

elif "dmimgcalc" == toolname:
    task=sys.argv[3]
    
    if task in ["add", "mul", "sub_c-p", "sub_p-c", "div_c/p", "div_p/c"]:
        # Get fits image from ds9
        cmd = [ 'xpaset', '-p', xpa, 'frame', 'prev' ]
        sp.run( cmd, check=True)
        infile2=save_ds9_image(xpa)
        cmd = [ 'xpaset', '-p', xpa, 'frame', 'next' ]
        sp.run( cmd, check=True)
        tool.infile = tool.infile+","+infile2
    
    if "add" == task:
        tool.op="imgout=((img1*1.0)+img2)"
    elif "sub_c-p" == task:
        tool.op="imgout=((img1*1.0)-img2)"        
    elif "sub_p-c" == task:
        tool.op="imgout=(img2-(img1*1.0))"                
    elif "mul" == task:
        tool.op="imgout=((img1*1.0)*img2)"            
    elif "div_c/p" == task:
        tool.op="imgout=((img1*1.0)/img2)"                
    elif "div_p/c" == task:
        tool.op="imgout=(img2/(img1*1.0))"            
    elif "scale" == task:
        tool.op="imgout=((img1*1.0)*{})".format(sys.argv[4])
    elif "offset" == task:
        tool.op="imgout=((img1*1.0)+{})".format(sys.argv[4])        
    elif "pow" == task:
        tool.op="imgout=((img1*1.0)^{})".format(sys.argv[4])        
    elif "mod" == task:
        tool.op="imgout=((img1*1.0)%{})".format(sys.argv[4])
    elif task in ["acos","asin","atan","acosh","asinh","atanh","cos","cosh","exp","fabs","ln","log","sin","sinh","sqrt","tan","tanh"]:
        tool.op = "imgout={}(img1*1.0)".format(task)
    else:
        raise ValueError("Unknown task")
else:
    raise ValueError("Unknown Tool")


print("-------------")
import datetime
print(datetime.datetime.now())


try:
    verb=tool(clobber=True)
    if verb:
        print(verb)
    output_fn( xpa, outfile.name )    
    print("Output file: {}".format(outfile.name))

finally:

    if os.path.exists(infile):
        os.unlink(infile)

