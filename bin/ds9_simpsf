#!/usr/bin/env python

#
# Copyright (C) 2020 Smithsonian Astrophysical Observatory
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

from __future__ import print_function

import sys
import os
import subprocess as sp

assert 'DAX_OUTDIR' in os.environ, "This task must be run via dax"
assert 'MARX_ROOT' in os.environ, "Please setup MARX_ROOT before running this task"


def parse_infile( infile ):
    """
    Strip off any filters
    """
    tab=infile.split("[")[0]
    return tab


def get_coords( ds9 ):
    """
    Get coords: use crosshair if in crosshair mode,otherwise
      Get selected region, if any selected, otherwise
         Get regions
    """    

    if "crosshair" == xpaget(ds9, "mode"):
        xy_str = xpaget(ds9, "crosshair physical")
        xy_str = xy_str.split()
        xx = float(xy_str[0])
        yy = float(xy_str[1])
        return (xx,yy)

    # Else, regions are more complicated .... 
    # Try 'selected' first
    srcreg = xpaget( ds9, "regions -format ciao source -system "+
                "physical -strip yes selected").strip("\n")    

    if 0 == len(srcreg):
        # Try unselected
        srcreg = xpaget( ds9, "regions -format ciao source -system "+
                "physical -strip yes").strip("\n")
    
    if 0 == len(srcreg):
        raise RuntimeError("No source region and not in crosshair mode.")
    
    if srcreg.startswith("@"):
        raise RuntimeError("Arrr... too many src regions!")
    
    shapes = srcreg.strip(";").split(";")

    if len(shapes) > 1:
        raise RuntimeError("Please select a single region")

    from region import CXCRegion
    reg = CXCRegion(shapes[0])
    
    if reg.shapes[0].name in ['rectangle','polygon','field']:
        raise ValueError("Unsupported shape type: try circle or ellipse?")
    
    xx = reg.shapes[0].xpoints[0]
    yy = reg.shapes[0].ypoints[0]
        
    return (xx,yy)
    


def xpaget(ds9, cmd):
    "Run xpaget and return string"

    runcmd = [ "xpaget", ds9]
    runcmd.extend(cmd.split(" "))
    try:
        out = sp.run( runcmd, check=False, stdout=sp.PIPE).stdout
    except:
        raise RuntimeError("Problem getting {}".format(runcmd))
    
    return out.decode().strip()
        

def xpaset(ds9, cmd):
    "Run xpaset using -p (no stdin)"
    
    runcmd = [ "xpaset", "-p", ds9]
    runcmd.extend(cmd.split(" "))
    try:
        out = sp.run( runcmd, check=False, stdout=sp.PIPE).stdout
    except:
        raise RuntimeError("Problem getting {}".format(runcmd))
    
    return out.decode().strip()

    
def check_for_single(ds9):
    """
    Check for multiple ds9 instances; there can be only 1 #Highlander
    """
    ver = xpaget(ds9, "version")
    ver=ver.split("\n")
    if len(ver) > 1 or 'BEGIN' in ver[0]:
        raise RuntimeError("Multiple ds9's are running.  "+
                    "Please close the others and try again.")


from ciao_contrib.runtool import make_tool

ds9=sys.argv[1]
mono = sys.argv[2]
flux = sys.argv[3]
blur = sys.argv[4]
niter = sys.argv[5]
streak = ( "1" == sys.argv[6] )
pileup = ( "1" == sys.argv[7] )
ideal = ( "1" == sys.argv[8] )
extnd = ( "1" == sys.argv[9] )

check_for_single(ds9)

# Get first so we can go back to at the end.
curframe = xpaget(ds9, "frame")
xx,yy = get_coords(ds9)
filename = xpaget(ds9, "file")

dmcoords = make_tool("dmcoords")
dmcoords(infile=filename,op="sky", x=xx, y=yy, celfmt="deg")

root=os.path.join(os.environ["DAX_OUTDIR"], "simulate_psf", str(os.getpid()))
try:
    os.makedirs(root)
except Exception as e:
    pass

simpsf = make_tool("simulate_psf")
simpsf.infile = filename
simpsf.outroot = root+"/out".replace("//","/")
simpsf.ra = dmcoords.ra
simpsf.dec = dmcoords.dec
simpsf.spectrumfile = ""
simpsf.monoenergy = mono
simpsf.flux = flux
simpsf.blur = blur
simpsf.numiter = niter
simpsf.numsig=1
simpsf.minsize=256
simpsf.readout_streak = streak
simpsf.pileup = pileup
simpsf.ideal = ideal
simpsf.extended = extnd
simpsf.keep=True

    
vv = simpsf()
if vv:
    print(vv)

if not os.path.exists( simpsf.outroot+".psf"):
    raise RuntimeError("PSF file was not created")

xpaset(ds9, "fits new {}".format(simpsf.outroot+".psf"))
xpaset(ds9, "tile")
xpaset(ds9, "frame {}".format(curframe))
xpaset(ds9, "pan to {} {} fk5".format(simpsf.ra,simpsf.dec))
xpaset(ds9, "match frame wcs")

