#!/usr/bin/env python
# 
#  Copyright (C) 2020  Smithsonian Astrophysical Observatory
#
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

import sys
import os
import subprocess as sp
from tempfile import NamedTemporaryFile    

def check_unique(xpa):
    cmd = [ 'xpaaccess','-n',xpa]
    try:
        # xpaaccess returns num proc as exit status
        num = sp.run( cmd, check=False, stdout=sp.PIPE).stdout
    except:
        raise RuntimeError("Cannot access "+xpa)

    if num == '' or num is None or 0 == int(num):
        raise RuntimeError("What happened to ds9?")
    
    if int(num) != 1:
        raise RuntimeError("Multiple ({}) ds9's are running using the "+
            "same title: '{}'.  Please close the other windows "+
            "and restart.".format(num,xpa))

            
def save_ds9_image(xpa):
    cmd = [ 'xpaget', xpa, 'fits' ]
    fits = sp.run( cmd, check=True, stdout=sp.PIPE).stdout    

    img_file = NamedTemporaryFile(dir=os.environ["DAX_OUTDIR"],
      suffix="_ds9.img", delete=False)
    open(img_file.name,"wb").write(fits)
    
    return(img_file.name)
    
           
def get_region(xpa):
    cmd = [ 'xpaget', xpa, 'regions', '-format', 'ds9', 
      '-system', 'physical', 'source' ]
    reg = sp.run( cmd, check=True, stdout=sp.PIPE).stdout    

    regfile = NamedTemporaryFile(dir=os.environ["DAX_OUTDIR"],
      suffix="_ds9.reg", delete=False)
    open(regfile.name,"wb").write(reg)

    print("Using region file: "+regfile.name)

    return(regfile.name)


def find_aux( xpa, infile):
    """
    This is a little bit more involved.  The image displayed 
    in ds9 is all I've got.  I don't know that it was actually
    loaded from disk, or if it was loaded via xpa, or samp, or
    ... who knows.
    
    The concept of the cwd then is murky at best.  I try three options
    - "." (where-ever that is)
    - cwd as reported by ds9.  This will either be the directory
      in which ds9 was launched or the dir where the file is; not sure.
      (and I think this has changed in the past)
    - get the file name and use the dirname off of there.  Honestly 
      this is probably the most reliable since most users load from
      disk -- but I just don't know so I have to try all 3.    
    """
    
    from ciao_contrib.ancillaryfiles import find_ancillary_files_crate
    from pycrates import read_file
    
    cmd = ["xpaget", xpa, "cd"]  # This is probably dir where ds9 started
    cwd = sp.run( cmd, check=True, stdout=sp.PIPE).stdout.decode().strip()
    
    cmd = ["xpaget", xpa, "file"] # If image is from file on disk
    dskfile = sp.run( cmd, check=True, stdout=sp.PIPE).stdout.decode()
    dskdir = os.path.dirname(dskfile.strip())

    cr = read_file(infile)

    if cr.get_key_value("TELESCOP") != "CHANDRA":
        raise ValueError("This task is only available for Chandra data")

    def multi_try(ftype):
        for c in [ ".", cwd, dskdir]:
            flist = find_ancillary_files_crate(cr,[ftype],cwd=c)
            if flist is not None and flist[0] is not None:
                return flist
        raise NotImplementedError("Try again")
    
    asplist = multi_try("ASOL")    
    msklist = multi_try("MASK")
    
    assert len(msklist[0])==1, "Better only be 1 mask file or we're in trouble"

    print("Using asol file(s): "+str(asplist[0]))
    print("Using mask file: "+msklist[0][0])

    return { "asol" : asplist[0], "mask" : msklist[0] }
    

def run_dither_region(infile, auxfiles, regfile):
    from ciao_contrib.runtool import make_tool
    dr = make_tool("dither_region")

    outfile = NamedTemporaryFile(dir=os.environ["DAX_OUTDIR"],
      suffix="_dr.out", delete=False)

    dr.infile = auxfiles["asol"]
    dr.outfile = outfile.name
    dr.clobber = True
    dr.region = "region({})".format(regfile)
    dr.wcsfile = infile
    dr.maskfile = auxfiles["mask"]
    dr()

    print("Dither region output file is: "+dr.outfile)
    return(dr.outfile)


def plot_result(outfile,xpa):
    cmd = [ "ds9_plot_blt", outfile+"[cols time,fracarea]",
            outfile, xpa ]
    sp.run( cmd, check=True)


def doit():
    xpa = sys.argv[1]
    check_unique(xpa)
    infile=save_ds9_image(xpa)
    auxfiles=find_aux(xpa, infile)
    regfile=get_region(xpa)
    outfile = run_dither_region(infile,auxfiles,regfile)
    plot_result(outfile,xpa)


if __name__ == "__main__":    
    from datetime import datetime    
    print ("#===== {} =====".format(str(datetime.now()).split(".")[0]))
    doit()
    print("")
