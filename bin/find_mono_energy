#!/usr/bin/env python


"""Compute monochromatic energy based on spectral model
(incl responses) and band"""

import sys

import numpy as np
from sherpa.astro.ui import *       # pylint: disable=wildcard-import
from paramio import pset, paramopen, paramclose
import ciao_contrib.logger_wrapper as lw

TOOLNAME = "find_mono_energy"
__REVISION__ = "28 June 2021"

DATASET_ID = "myid"

# pylint: disable=undefined-variable


def setup_dataspace(arf, rmf):
    """Setup the sherpa dataspace based on RMF grid and associate
    ARF and RMF with that dataset.
    """

    _rmf = unpack_rmf(rmf)
    chan_lo = _rmf.offset
    chan_hi = _rmf.detchans

    _arf = unpack_arf(arf)

    dataspace1d(chan_lo, chan_hi, id=DATASET_ID, dstype=DataPHA)
    set_arf(DATASET_ID, _arf)
    set_rmf(DATASET_ID, _rmf)


def setup_model(model, model_params):
    "Set the source model"

    try:
        set_model(DATASET_ID, model)
    except Exception as mybad:
        raise ValueError(f"ERROR in model '{model}'\n{mybad}")

    try:
        # pylint: disable=exec-used
        exec(model_params)
    except Exception as mybad:
        raise ValueError(f'Error in paramvals={model_params}]\n{mybad}')


def setup_band(band):
    "Parse the energy band"

    csc = {'soft': '0.5:1.2', 'medium': '1.2:2.0', 'hard': '2.0:7.0',
           'broad': '0.5:7.0', 'ultrasoft': '0.2:0.5',
           'wide': '0.1:10.0'}

    if band in csc:
        elo, ehi = [float(x) for x in csc[band].split(":")]
    elif band.count(":") != 1:
        raise ValueError(f"Unknown band value {band}")
    else:
        elo, ehi = [float(x) for x in band.split(":")]

    notice_id(DATASET_ID, elo, ehi)


def compute_metric(metric):
    "Compute the metric based on the fluxed spectrum"
    dater = get_model_plot(DATASET_ID)

    emid = (dater.xlo+dater.xhi)/2.0
    delta_e = dater.xhi - dater.xlo
    if np.any(delta_e == 0):
        raise ValueError("Energy bins cannot have 0 width")

    flux = dater.y
    flux = flux / delta_e

    if metric == "mean":
        mean_e = np.sum(flux*emid)/np.sum(flux)
    elif metric == "max":
        mean_e = emid[np.argmax(flux)]
    else:
        raise ValueError(f"Unknown metric '{metric}'")

    return mean_e


def pset_output(mono_energy):
    "Save output back to own parameter file"

    pfile = paramopen(TOOLNAME, "rwL", sys.argv)   # allow @@
    pset(pfile, "energy", str(mono_energy))
    paramclose(pfile)


def clear_output():
    "Clear output at startup"
    pset_output("")


@lw.handle_ciao_errors(TOOLNAME, __REVISION__)
def main():
    "Main routine"

    # Setup verbose
    lgr = lw.initialize_logger(TOOLNAME)
    verb1 = lgr.verbose1

    clear_output()

    # get parameters
    from ciao_contrib.param_soaker import get_params

    # Load parameters
    pars = get_params(TOOLNAME, "rw", sys.argv,
                      verbose={"set": lw.set_verbosity, "cmd": verb1})

    setup_dataspace(pars["arffile"], pars["rmffile"])
    setup_model(pars["model"], pars["paramvals"])
    setup_band(pars["band"])
    mono_energy = compute_metric(pars["metric"])

    verb1(f"Characteristic Energy = {mono_energy}")

    pset_output(mono_energy)


if __name__ == "__main__":
    main()
