#!/usr/bin/env python
#
# Copyright (C) 2019-2022 Smithsonian Astrophysical Observatory
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

"Create a map of a certain static of a certain column"


import sys
import os

import numpy as np
from pycrates import read_file

import ciao_contrib.logger_wrapper as lw
toolname = "statmap"
__revision__ = "05 July 2022"
lw.initialize_logger(toolname)
lgr = lw.get_logger(toolname)
verb0 = lgr.verbose0
verb1 = lgr.verbose1
verb2 = lgr.verbose2
verb3 = lgr.verbose3
verb4 = lgr.verbose4
verb5 = lgr.verbose5


class CIAONamedTemporaryFile():
    "CIAO named temp file, uses ASCDS_WORK_PATH and del when done."

    _tmpdir = os.environ["ASCDS_WORK_PATH"]

    def __init__(self):
        from tempfile import NamedTemporaryFile
        retval = NamedTemporaryFile(dir=self._tmpdir, delete=False)
        self.__tmp = retval

    @property
    def name(self):
        'Get file name'
        return self.__tmp.name

    def __del__(self):
        self.__tmp.close()
        if os.path.exists(self.__tmp.name):
            os.unlink(self.__tmp.name)


def map_stat_function(stat):
    "convert stat name to a statistical function"

    do_stat = {'median': np.median,
               'max': np.max,
               'min': np.min,
               'mean': np.mean,
               'count': len,
               'sum': np.sum
               }
    assert stat in do_stat, "Unknown statistic"
    return do_stat[stat]


def assign_mapid_to_events(evtfile, mapfile, column, xcol, ycol):
    "Lookup event locations in map"

    from ciao_contrib.runtool import make_tool

    verb2("Mapping events")

    tmpevt = CIAONamedTemporaryFile()

    pick = make_tool("dmimgpick")
    pick.infile = evtfile+f"[cols {xcol},{ycol},{column}]"   # fewer cols = faster
    pick.imgfile = mapfile
    pick.outfile = tmpevt.name
    pick.method = "closest"
    pick.clobber = True
    pick()
    return tmpevt


def load_event_file(infile, column, xcol, ycol):
    "Load event file w/ map IDs"

    def find_map_column_name(evtfile):
        "find map column name by process of elimination"
        cols = evtfile.get_colnames(vectors=False)
        map_col = [x for x in cols if x.lower() not in [xcol, ycol, column]]
        assert len(map_col) == 1, "Somehow extra columns are present"
        return map_col[0]

    verb2("Loading event file")
    evtfile = read_file(infile)
    map_col = find_map_column_name(evtfile)
    map_vals = evtfile.get_column(map_col).values
    col_vals = evtfile.get_column(column).values
    return map_vals, col_vals


def compute_stats(map_vals, col_vals, func):
    "Compute stats for each mapID"

    verb2("Computing stats")
    stat_vals = {}

    # Ignore any NaN or Inf values
    good_map_vals = map_vals[np.isfinite(map_vals)]

    unique_pixel_vals = np.unique(good_map_vals)
    npix = len(unique_pixel_vals)
    verb3(f"Number of unique map values in event file: {npix}")

    for pixel_val in unique_pixel_vals:
        idx = np.where(map_vals == pixel_val)
        vals = col_vals[idx[0]]
        stat_vals[pixel_val] = func(vals) if len(vals) > 0 else 0
    return stat_vals


def replace_mapid_with_stats(stat_vals, mapfile):
    "Replace map values with stat value, same as dmmaskfill"

    verb2("Paint by numbers")

    verb2(f"Reading mapfile '{mapfile}'")
    mapimg = read_file(mapfile).get_image().values.copy()
    outvals = np.zeros_like(mapimg).astype(np.float)

    unique_pixel_vals = np.unique(mapimg)
    npix = len(unique_pixel_vals)
    verb3(f"Number of unique map values in mapfile: {npix}")

    for pixel_val in unique_pixel_vals:
        idx = np.where(mapimg == pixel_val)
        outvals[idx] = stat_vals[pixel_val] if pixel_val in stat_vals else np.nan

    return outvals


def write_output(outvals, mapfile, outfile, stat, column, clobber):
    "Write output"

    verb2(f"Writing output file '{outfile}'")
    outmap = read_file(mapfile)
    outmap.name = f"{stat}_{column}"
    outmap.get_image().values = outvals
    outmap.write(outfile, clobber=clobber)


def process_parameters():
    "Read parameters and do some manipulation handling."

    from ciao_contrib.param_soaker import get_params
    from ciao_contrib._tools.fileio import outfile_clobber_checks

    pars = get_params(toolname, "rw", sys.argv,
                      verbose={"set": lw.set_verbosity, "cmd": verb1})

    pars["clobber"] = (pars["clobber"] == "yes")
    outfile_clobber_checks(pars["clobber"], pars["outfile"])

    return pars


@lw.handle_ciao_errors(toolname, __revision__)
def main():
    "Main routine"

    pars = process_parameters()

    do_stat_func = map_stat_function(pars["statistic"])
    tmpevt = assign_mapid_to_events(pars["infile"], pars["mapfile"],
                                    pars["column"], pars["xcolumn"],
                                    pars["ycolumn"])
    map_vals, col_vals = load_event_file(tmpevt.name, pars["column"],
                                         pars["xcolumn"], pars["ycolumn"])
    stat_vals = compute_stats(map_vals, col_vals, do_stat_func)

    outvals = replace_mapid_with_stats(stat_vals, pars["mapfile"])

    write_output(outvals, pars["mapfile"], pars["outfile"],
                 pars["statistic"], pars["column"], pars["clobber"])

    from ciao_contrib.runtool import add_tool_history
    add_tool_history(pars["outfile"], toolname, pars,
                     toolversion=__revision__)


if __name__ == "__main__":
    main()
