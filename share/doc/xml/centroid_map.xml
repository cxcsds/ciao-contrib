<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE cxchelptopics SYSTEM "CXCHelp.dtd">
<cxchelptopics>
<ENTRY 
        context="Tools::Image" 
        key="centroid_map" 
        refkeywords="centroid map mask adaptive bin group grow max tessellation" 
        seealsogroups="dmimgtools"
    >
    <SYNOPSIS>
       Adaptively bin an image using centroid map algorithm
    </SYNOPSIS>
    <DESC>
        <PARA>
        The centroid_map tool implements an iterative adaptive binning 
        routine.  First, the tool determines the location of the local
        maxima in the input image.  The location of these maxima are called
        'sites'.  It then performs a Voronoi Tessellation
        to determine the convex hull polygons around each initial site.
        This is done using the vtbin tool.
        Next it computes the centroid of the pixel values enclosed in each
        polygon. Theses centroids are then used as the sites for the next
        iteration.  The tessellation and centroid process is repeated
        the user-specified number of iterations.
        </PARA>
        <PARA>
        It can be shown that this algorithm will eventually converge
        (ie the sites do not change between iterations).  However, it
        may converge slowly where most of the sites remain fixed and only
        a few sites take many iterations to converge.  This is why the
        number of iterations is left as a user parameter.  Typical values
        will be in the 30-150 range.  
        </PARA>
        <PARA>
        Users can also supply their own initial site file (rather than
        use the location of the local maxima).  This allows the user 
        to control the initial location of the site and to control the total
        number of site locations.  The number of sites is fixed; 
        neighboring sites cannot 'merge' together.
        </PARA>
        <PARA>
        The input image should be smoothed.  Since the tool 
        determines the location of local maxima in a 5x5 pixel neighborhood, 
        the input should be smoothed at least on that scale.
        </PARA>
        <PARA>
        The output from the centroid_map tool is the map file: an image
        whose pixel values indicate which pixels are grouped together.
        Users can use the dmmaskbin tool to create a binned imaged.
        </PARA>
    </DESC>


     <QEXAMPLELIST>
        <QEXAMPLE>
          <SYNTAX>
            <LINE>% aconvolve img.fits sm_img.fits "lib:gaus(2,5,1,3,3)"</LINE>
            <LINE>% centroid_map sm_img.fits sm_img.map numiter=30</LINE>
            <LINE>% dmmaskbin sm_img.fits sm_img.map sm_img.img</LINE>
          </SYNTAX>
          <DESC>
            <PARA>
            First the input image is smoothed with a 3-pixel sigma Gaussian.
            Then we compute the centroid_map using this smoothed image, using
            30 iterations.
            </PARA>
            <PARA>
            The dmmaskbin tool is then used to apply the map to the
            input image to create the rebinned image: sm_img.img.
            </PARA>
          </DESC>
        </QEXAMPLE>

        <QEXAMPLE>
          <SYNTAX>
            <LINE>% dmimgadapt img.fits smoothed.fits function=cone counts=50 min=1 max=20 num=20 radscale=linear</LINE>
            <LINE>% dmimgfilt smoothed.fits local_max function=peak mask="box(0,0,7,7)"</LINE>
            <LINE>% dmimgblob local_max sites.fits threshold=0.5 srconly=yes</LINE>
            <LINE>% centroid_map img.fits img.map numiter=50 sitefile=sites.fits</LINE>
          </SYNTAX>
          <DESC>
            <PARA>
            In this example we start by adaptively smoothing the 
            input image.  We then locate the local maximum in a larger
            7x7 pixel region, and then use dmimgblob to label local max 
            with a unique value to create the sites.fits files.
            </PARA>
            <PARA>
            The sites.fits file is then used to seed the centroid_map
            algorithm.
            </PARA>
          </DESC>
        </QEXAMPLE>

        <QEXAMPLE>
          <SYNTAX>
            <LINE>% python -c 'import sherpa.astro.ui as ui;ui.load_data("img.fits");ui.set_model("const2d.flat");flat.c0=0.005;ui.fake();ui.save_image("fake.img",ascii=False,clobber=True)'</LINE>
            <LINE>% dmimgthresh fake.img fake_thresh.img exp=smimg.fits cut=0.5 value=0</LINE>
            <LINE>% dmimgblob fake_thresh.img sites.fits thresh=1 srconly=yes</LINE>
            <LINE>% centroid_map img.fits random.map numiter=30 site=sites.fits</LINE>
            <LINE>% dmmaskbin img.fits random.map random.img</LINE>
          </SYNTAX>
          <DESC>
            <PARA>
            In this example we want to use a random starting location for
            the sites.  To do this, we use the sherpa fake() command
            with a flat, 2D constant model with a Poisson rate of 0.005 
            counts per pixel.  We then use the dmimgthresh command to 
            remove sites that are off the detector (in parts of the smoothed
            image which are zero). Then we use dmimgblob as before to
            assign a unique label to each site.             
            </PARA>
            <PARA>
            The random sites.fits file is then used to 
            initialize the centroid_map algorithm.
            </PARA>
          </DESC>
        </QEXAMPLE>
     </QEXAMPLELIST>



     <PARAMLIST>
        <PARAM name="infile" type="file" filetype="input" reqd="yes">
            <SYNOPSIS>
            Input image.
            </SYNOPSIS>
            <DESC>
                <PARA>
            If the sitefile parameter is not 
            specified, then this image should be smoothed so that
            the algorithm locate statistically significant local maxima
            (ie not just single isolated events).  If the sites file
            is supplied then this image does not need to be smoothed.
                </PARA>
                <PARA>
            If the input image contains a large number of pixels 
            outside the detector's field-of-view, users should 
            filter the image first to encode the boundary in the
            file's data-subspace                
                </PARA>
<VERBATIM>% dmcopy "img.fits[sky=region(fov.fits)]" img.dss.fits</VERBATIM>
            <PARA>
            The centroid_map script will use the information in
            the file's subspace; making it run faster by avoiding
            processing the off-detector pixels.            
            </PARA>
            </DESC>
        </PARAM>

        <PARAM name="outfile" type="file" filetype="output" reqd="yes">
          <SYNOPSIS>
            Output map file
          </SYNOPSIS>
          <DESC>
            <PARA>
              The outfile is a map file containing integer pixel values.
              The pixel values indicate which pixels are grouped
              together by the algorithm.  A pixel value of 0 are pixels
              which are ungrouped (ie outside the image subspace).            
            </PARA>
            <PARA>
              Users can use the dmmaskbin tool to apply this map file
              to a counts image to obtain an adaptively binned counts
              image.
            </PARA>
          </DESC>
        </PARAM>

        <PARAM name="numiter" type="integer" min="1" def="1">
          <SYNOPSIS>Number of iterations</SYNOPSIS>
          <DESC>
            <PARA>
            The centroid_map will eventually converge to a state
            where the sites no longer move.  However, it can
            converge very slowly, where only a few sites at the
            end take a large number of iterations to become fixed.
            Rather than try to guess when the algorithm has converged 
            "enough", the script uses the numiter parameter to
            control the number of iterations.  Typical values will 
            be on the order of 30 to 150 iterations. 
            </PARA>          
          </DESC>
        </PARAM>
        <PARAM name="sitefile" type="file" filetype="input">
          <SYNOPSIS>Optional input site file</SYNOPSIS>
          <DESC>
            <PARA>
                If not specified, the centroid_map begins by
                determining the intial site locations by finding 
                all the local maxima in 5x5 regions.  This fixes
                the number of sites, and thus the number of 
                bins in the final output.            
            </PARA>
            <PARA>
                Instead, users can supply their own sitefile, based
                on whatever criteria they wish. This allows the  user
                to control the number of sites and thus the number of
                bin in the final output. 
            </PARA>
          </DESC>
        </PARAM>
        <PARAM name="scale" type="string" def="linear">
          <SYNOPSIS>Scaling applied to pixel values when computing centroid</SYNOPSIS>
          <DESC>
            <PARA>
                In images with a large dynamic range of pixel values,
                very bright pixels can lead to very small groups.
                By applying a scaling function to the pixel values
                before computing the centroid it can help the algorithm
                produce groups with more uniform areas.
            </PARA>
            <PARA>
            The following scaling functions are available
            </PARA>
            <LIST>
                <ITEM>linear</ITEM>
                <ITEM>sqrt</ITEM>
                <ITEM>squared</ITEM>
                <ITEM>asinh</ITEM>            
            </LIST>
          
          </DESC>
        </PARAM>
        <PARAM name="verbose" type="integer" def="1" min="0" max="5">
            <SYNOPSIS>
            Amount of chatter from the tool.
            </SYNOPSIS>
        </PARAM>
        <PARAM name="clobber" type="boolean" def="no">
            <SYNOPSIS>
            Delete outfile if it already exists?
            </SYNOPSIS>
        </PARAM>
    </PARAMLIST>

    <ADESC title="Changes in scripts 4.16.1 (Q1 2024) release">
      <PARA>
        Fix problem when input image contains NaNs; those pixel
        values are now ignored when computing the centroid.
      </PARA>
    </ADESC>


    <ADESC title="About Contributed Software">
      <PARA>
        This script is not an official part of the CIAO release but is
        made available as "contributed" software via the
        <HREF link="https://cxc.harvard.edu/ciao/download/scripts/">CIAO scripts page</HREF>.
        Please see this page for installation instructions.
      </PARA>
    </ADESC>

    <BUGS>
        <PARA>
            See the
            <HREF link="https://cxc.harvard.edu/ciao/bugs/index.html">CIAO
            website</HREF> for an up-to-date listing of known bugs.
        </PARA>
    </BUGS>
    <LASTMODIFIED>January 2024</LASTMODIFIED>
</ENTRY>
</cxchelptopics>
