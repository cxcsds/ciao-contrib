<?xml version="1.0"?>
<!DOCTYPE cxchelptopics SYSTEM "CXCHelp.dtd" [
 <!ENTITY tool "convert_xspec_user_model">

 <!ENTITY upr "unix&#37;">
 <!ENTITY spr "sherpa>">
 <!ENTITY xspec "XSPEC">

]>
<cxchelptopics>
  <ENTRY key="convert_xspec_user_model" context="tools"
	 refkeywords="xspec x-spec user model compile build
		      initpackage lmodel.dat model.dat
		      f2py udmget lmod cfitsio no-xspec noxspec
		      sherpa_contrib.xspec.local xspec.local
		      local lmod
		      "
         seealsogroups=""
	 >

    <SYNOPSIS>
      Compile a &xspec; user model for use in Sherpa *experimental*
    </SYNOPSIS>

    <SYNTAX>
      <LINE>&tool; name modelfile</LINE>
      <LINE/>
      <LINE>Unlike most CIAO contributed scripts, there is no parameter file.</LINE>
      <LINE/>
      <LINE>The supported command-line flags can be found using -h/--help:</LINE>
      <LINE/>
      <LINE>-l / --local    build the package locally rather than globally?</LINE>
      <LINE>-p / --prefix   flags are used to control the user model names</LINE>
      <LINE>--pyver         set the version number of the Python module</LINE>
      <LINE>-c / --clobber  will overwrite existing files.</LINE>
      <LINE>-v / --verbose  changes the amount of screen output.</LINE>
      <LINE>--version prints the script version</LINE>
    </SYNTAX>

    <DESC>
      <PARA>
	The &tool; tool will compile a &xspec; user model into a form
	usable by Sherpa; it is therefore similar to the "initpackage"
	command in &xspec;.  Unlike the initpackage command, this
	script does not require that the &xspec; source package is
	installed, and is not run from Sherpa but the command line.
      </PARA>

      <PARA>
	This script is *experimental* and will not work
	for all models; please see the "Known Problems"
	section below for more information and contact the
	<HREF link="https://cxc.harvard.edu/helpdesk/">CXC HelpDesk</HREF>
	if you find problems or models that it will not compile.
	At present any model requiring access to the udmget
	&xspec; routine is not supported.
      </PARA>

      <PARA>
	The script takes the model file - often called model.dat or
	lmodel.dat - and the source code in the working directory,
	using them to create a Python module consisting of the
	compiled model and some supporting Python code that creates
	the Sherpa model.  The output is a Python module, whose name
	is the first argument to the script. This can be loaded into
	Sherpa by saying (assuming that you ran '&tool; relxill ...'):
      </PARA>

      <PARA>
	<SYNTAX>
	  <LINE>&spr; import relxill.ui</LINE>
	</SYNTAX>
      </PARA>

      <PARA title="Loading the module">
	By default the module is installed globally, so that this
	import should work from any directory, but you can use the
	--local flag to build a version of the code that requires
	either changing to the directory you ran &tool;, or
	by adding the directory to the Python path list.
      </PARA>

      <PARA title="Using the models">
	At this point the models can then be used; the default
	behavior of the script is to add the prefix "xsum"
	to the model name (in a similar manner to how Sherpa uses
	the prefix "xs" for the &xspec; models), but this
	can be changed using the --prefix flag, as shown
	below in the examples.
      </PARA>

      <PARA title="Table models">
	Sherpa already supports additive, multiplicative, and
	exponential
	XSPEC table models using the
	<HREF link="https://cxc.harvard.edu/sherpa/ahelp/load_xstable_model.html">load_xstable_model</HREF>
	command (support for exponential table models was added
	in CIAO 4.14).
      </PARA>

      <PARA title="Removing the models">
	The models can be removed by running the following
	command (replacing name with the value used when
	running &tool;):
      </PARA>
      <PARA>
	<SYNTAX>
	  <LINE>&upr; pip uninstall name</LINE>
	</SYNTAX>
      </PARA>
      <PARA>
	This step is not needed if you used the --local flag.
      </PARA>
    </DESC>

    <QEXAMPLELIST>
      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&upr; ls *.f</LINE>
	  <LINE>mdl.f</LINE>
	  <LINE>&upr; &tool; mymodel lmodel.dat</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    The mymodel module is created, which contains the model(s)
	    defined in the file lmodel.dat and with code in mdl.f.
	    In this example it defines two models called, imaginatively
	    enough, mdl1 (additive) and mdl2 (multiplicative).
	    If the script completes successfully then you can then load
	    the models into Sherpa with the command:
	  </PARA>
	  <PARA>
	    <SYNTAX>
	      <LINE>&spr; import mymodel.ui</LINE>
	      <LINE>Adding additive       XSPEC local model: xsummdl1</LINE>
	      <LINE>Adding multiplicative XSPEC local model: xsummdl2</LINE>
	    </SYNTAX>
	  </PARA>
	  <PARA>
	    At this point any additive, convolution, and multiplicative models
	    will be available using the &xspec; name with the prefix
	    "xsum". So, (assuming mdl2 has an alpha component), we can
	    use them as any other XSPEC model:
	  </PARA>
	  <PARA>
	    <SYNTAX>
	      <LINE>&spr; set_source(xsphabs.galabs * xsimmdl1.mdl)</LINE>
	      <LINE>&spr; print(mdl)</LINE>
	      <LINE>&spr; xsummdl2.gas</LINE>
	      <LINE>&spr; gas.alpha = 2</LINE>
	    </SYNTAX>
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<!--
	<SYNTAX>
	  <LINE>&spr; from sherpa.utils.logging import SherpaVerbosity</LINE>
	  <LINE>&spr; with SherpaVerbosity("WARN"):</LINE>
	  <LINE>...         import mymodel.ui</LINE>
	</SYNTAX>
	-->
	<DESC>
	  <VERBATIM>&spr; from sherpa.utils.logging import SherpaVerbosity
&spr; with SherpaVerbosity("WARN"):
...         import mymodel.ui
</VERBATIM>
	  <PARA>
	    When the "model.ui" module is loaded a line is displayed for
	    each model that is added to Sherpa. This output is controlled
	    by the Sherpa logging interface and can be turned off
	    temporarily, as shown above, to hide this output. Note that
	    the final line, re-setting the level, should not be forgotten
	    or else you may miss useful information from Sherpa
	    functions.
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&upr; &tool; mymodel2 lmodel.dat --prefix</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    In this case the model names are not preceeded by "xsum",
	    as in the example above, because the --prefix argument has
	    been given. This means that instead of saying
	    xsummdl1.mdl you would just say mdl1.mdl.
	  </PARA>
	  <PARA>
	    Note that there is only a limited check that the model names do not
	    match existing Sherpa models or function names, so there
	    is a chance for confusion.
	  </PARA>
	  <PARA>
	    To use a different prefix than "xsum" supply an argument to
	    the --prefix flag, but it must start with a capital letter -
	    e.g.
	    <EQUATION>--prefix XS</EQUATION>
	    would make the model name be xsmdl1 rather than xsummdl1.mdl.
	    The requirement for a capital letter is because the name is
	    also used to create a Python class (this class is not used
	    in normal use of Sherpa).
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&upr; ls *.c</LINE>
	  <LINE>polar.c polarutils.c</LINE>
	  <LINE>&upr; &tool; polar lmodel_polar.dat --clobber</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    Here the models in the file lmodel_polar.dat - with C code
	    automatically picked up from the polar.c and polarutils.c
	    files - are compiled to create a polar module.
	    The --clobber argument is used to delete any existing version
	    of the module.
	  </PARA>
	</DESC>
      </QEXAMPLE>

      <QEXAMPLE>
	<SYNTAX>
	  <LINE>&upr; cd /data/xspeclmodels/foo</LINE>
	  <LINE>&upr; &tool; foo model.dat --local</LINE>
	</SYNTAX>
	<DESC>
	  <PARA>
	    This builds the module "foo" but does not install
	    it into Python. To use the module you either need
	    to change to this directory or add the directory
	    to the Python path such as the following
	  </PARA>
<VERBATIM>
os.sys.path.insert(0, '/data/xspeclmodels/foo/src')
import foo.ui
</VERBATIM>
	</DESC>
      </QEXAMPLE>

    </QEXAMPLELIST>

    <ADESC title="Loading the module">
      <PARA>
	The default behavior is to add the module to the
	Python installation, in which case the module
	can be installed with just the command (replacing
	name with the name given when runnnig &tool;):
      </PARA>
      <PARA>
	<SYNTAX>
	  <LINE>&spr; install name.ui</LINE>
	</SYNTAX>
      </PARA>
      <PARA>
	If you used the --local option then you either have
	to run Python (or sherpa) from the directory where
	you ran &tool;, or adjust the python path by
	setting the PYTHONPATH environment variable or
	changing the os.sys.path array. For example, the
	following will allow models defined in /data/models/
	to be loaded:
      </PARA>
      <PARA>
	<SYNTAX>
	  <LINE>&upr; setenv PYTHONPATH /data/models</LINE>
	</SYNTAX>
      </PARA>
      <PARA>or</PARA>
      <PARA>
	<SYNTAX>
	  <LINE>&spr; import os</LINE>
	  <LINE>&spr; os.sys.path.insert(0, "/data/models")</LINE>
	</SYNTAX>
      </PARA>
      <PARA title="Automatically loading the module into Sherpa">
	Models can automatically be loaded into Sherpa by taking
	advantage of the IPython startup directory. Any Python file
	in $HOME/.ipython-ciao/profile_sherpa/startup/ will be
	loaded when Sherpa is started up, so add a file to this
	directory - e.g. 90-xspec-models.py - with commands to
	set up the models. An example file is shown below; adjust
	as appropriate:
      </PARA>
<VERBATIM>
import os

# If needed, set the path with commands like
#   os.sys.path.insert(0, "/data/models/carbatm")
#
import carbatm.ui
import relxill.ui

# The carbatm model needs to know where the data files are
# via &xspec; settings; relxill via an environment variable:
#
set_xsxset("CARBATM", "/data/models/carbatm")
os.environ["RELLINE_TABLES"] = "/data/models/relxill"
</VERBATIM>
      <PARA>
        Starting Sherpa will display a line for each message, which can
	be useful but quickly gets annoying. To hide these messages
	use the SherpaVerbosity context managed (new in CIAO 4.14):
      </PARA>
      <VERBATIM>
from sherpa.utils.logging import SherpaVerbosity

with SherpaVerbosity('WARN'):
    import carbatm.ui
    import relxill.ui

</VERBATIM>

      <PARA title="Notes">
	This only works for the Sherpa application. If you
	have loaded up Sherpa into an IPython session
	or a script then you wil have to manually load in the
	models you need.
      </PARA>
    </ADESC>

    <ADESC title="Known Problems">
      <PARA>
	Please contact the
	<HREF link="https://cxc.harvard.edu/helpdesk/">CXC HelpDesk</HREF>
	if you have a problem or need to use an unsupported
	feature, such as platform or language.
      </PARA>
      <PARA title="Platform support">
	If possible the conda installation
	of CIAO is to be preferred (as the compiler versions are likely
	to better match those used to build CIAO).
      </PARA>
      <PARA>
	The macOS support is limited. It my be necessary to set the
	following environment variables (adjusted to point to
	the locations on your system):
      </PARA>
<VERBATIM>
setenv CC `which clang`
setenv CXX `which clang++`
setenv FC `which gfortran`
setenv CONDA_BUILD_SYSROOT /opt/MacOSX10.9.sdk
</VERBATIM>
      <PARA title="Language support">
	All the languages supported by &xspec; user models - i.e.
	C, C++, and Fortran - should be supported, as long
	as the compiler is compatible with that used
	to compile the &xspec; models in CIAO (see below).
      </PARA>
      <PARA title="No support for udmget">
	Those models that require the --udmget flag
	to the &xspec; initpackage are not supported
	at this time.
      </PARA>
      <PARA title="Model types">
	Sherpa only supports the additive, multiplicative,
	and convolution models; other models will be ignored.
      </PARA>
      <PARA>
	Models that need to be re-evaluated per spectrum
	or that calculate model variances
	are converted but there has been no testing to see
	if they work correctly (note that Sherpa ignores
	the error array that is returned by these models).
      </PARA>
      <PARA>
	When using convolution models, one possible
	problem is if you have ignored an energy - or
	wavelength - range within the data; if this
	range is larger than the RMF at this energy
	then it may be possible that the convolution
	will not properly account for edge effects.
      </PARA>
      <PARA title="Choice of module name">
	The first argument to &tool; is used to
	create a Python module of the same name that can then
	be loaded into Sherpa or a Python script.
	It can not match the name of one of the models (once
	the prefix value has been added), and it
	should not match other Python modules or common symbols,
	otherwise it could confuse users.
	There is only limited checking to see whether there
	are possible name clashes for the module and model
	names.
      </PARA>
      <PARA title="Parameter types">
	Periodic parameters are not supported.
      </PARA>
      <PARA title="Accessing &xspec; routines">
	The default behavior is to try and link against the
	&xspec; libraries, but the results have not been
	well tested. One known problem is if the gfortran
	version is significantly different to that used to
	build the &xspec; models provided as part of
	<!--
	    CIAO (gcc/gfortran version 4.? in CIAO 4.8),
	-->
	CIAO,
	which can lead to errors such as
      </PARA>
<VERBATIM>
undefined symbol: _gfortran_copy_string
</VERBATIM>
      <PARA title="External files or set up">
	The equivalent location of the spectral/xspec/
	directory of &xspec; is the spectral/modelData/
	directory within $ASCDS_INSTALL. The location
	depends on whether CIAO was installed with conda
	or ciao-install, and can vbe found with the
	sherpa.astro.xspec.get_xspath_model()
	routine.
	The
	<HREF link="https://cxc.harvard.edu/sherpa/ahelp/set_xsxset.html">set_xsxset command</HREF>
	can be used to set an &xspec;
	"xset" variable, if the model uses these to define
	alternative locations for data files or other
	configuration information. The os.environ
	directionary can be used to set an environment
	variable if these are used by the model; for example
      </PARA>
      <PARA>
	<SYNTAX>
	  <LINE>&spr; set_xsxset('CARBATM', '/data/models/data/carbatm')</LINE>
	  <LINE>&spr; os.environ['TBLLOC'] = '/data/models/data'</LINE>
	</SYNTAX>
      </PARA>
      <PARA>
	will set the CARBATM &xspec; variable and the
	TBLLOC environment variable.
      </PARA>
    </ADESC>

    <ADESC title="What to do if the module fails to compile?">
      <PARA title="Unsupported models">
	The script will error out if there are no supported models
	in the modelfile (e.g. 'lmodel.dat'). Please contact the
	<HREF link="https://cxc.harvard.edu/helpdesk/">CXC HelpDesk</HREF>
	if this happens, but please note that there is no support
	in Sherpa for these types of models.
      </PARA>
      <PARA title="Problems while building the code">
	If there is a problem when building the interface the resulting
	error message is unlikely to be useful. In this case try
	running
      </PARA>
      <PARA>
	<SYNTAX>
	  <LINE>&upr; pip install . --verbose</LINE>
	</SYNTAX>
      </PARA>
      <PARA>
	as it should provide more information. Possible problems are
	models that refer to XSPEC code from older (or newer) versions
	of XSPEC than used by CIAO, as well as access to certain parts of
	the XSPEC build system.
	Some of these can be worked around - such as removing the problematic
	models or tweaking how the extension module is built in setup.py -
	and the <HREF link="https://cxc.harvard.edu/helpdesk/">CXC HelpDesk</HREF>
	may be able to help.
      </PARA>
    </ADESC>

    <ADESC title="Parameter names">
      <PARA>
	Not all parameter names are usable in Sherpa, due
	to the Python grammar. Below is
	a list of the conversion rules used, but if you are in
	doubt then just print out an instance of a model
	to see what the names are.
      </PARA>
      <PARA>
	The conversion rules are:
      </PARA>
      <LIST>
	<ITEM>The @ character is replaced with the string At.</ITEM>
	<ITEM>The name break is converted to break_, lambda to lambda_, type to type_; any
	  parameter surrounded by &lt; and &gt; has these characters
	  removed and _ave added to the end (so "&lt;kT&gt;" would
	  be changed to "kT_ave"); and a name ending with "(...)"
	  is replaced by "_..." (so "Rin(G)" becomes "Rin_G").
	</ITEM>
	<ITEM>Any invalid character for a Python symbol is replaced by _.</ITEM>
      </LIST>
    </ADESC>

    <ADESC title="What does the script do?">
      <PARA>
	The compilation of the code is based on the
	approach taken in the
	<HREF link="https://github.com/DougBurke/xspeclmodels">xspeclmodels</HREF>
	project, which uses the build structure provided by Python
	and Sherpa to build the code.
	There are two parts to the process:
      </PARA>
      <LIST>
	<ITEM>create a module of the compiled code</ITEM>
	<ITEM>create the Python interface to this compiled code.</ITEM>
      </LIST>
      <PARA>
	The model definition file is parsed to extract all the models,
	which provides details on the model name, its type (such
	as additive or multiplicative), the arguments, the
	name of the routine that evaluates the model, and
	the language used for this routine.
	The parsing follows the definition given in the
	<HREF link="https://heasarc.gsfc.nasa.gov/xanadu/xspec/manual/XSappendixLocal.html">&xspec;
	appendix on local models</HREF> and is based on
	the sherpa.astro.utils.xspec.parse_xspec_model_description
	routine from Sherpa.
      </PARA>
      <PARA title="Creating the compiled code">
	The compiled code is buuilt following the approach Sherpa
	uses to build its interface to the XSPEC model library.
	The C++ code is generated in the src/{modname}/src/_models.cxx
	file. The sherpa.astro.utils.xspec.create_xspec_code
	routine is used to create the files.
      </PARA>

      <PARA title="What files are compiled?">
	The following files in the current working directory are
	compiled: *.f, *.f03, *.f90, *.c, *.cxx, *.C, *.cpp, and
	*.cc. These are compiled via the Python Extension
	class (details are in the setup.py file), although
	there is some extra work to compile FORTRAN files
	using this iinterface. Any improvements to this
	code would be gratefully received!
      </PARA>

      <PARA title="Creating the python code">
	The script creates two Python files:
	src/{modname}/__init.py - which defines the Python classes
	that represent the models - and
	src/{modname}/ui.py - which should be used to load the
	models into a Sherpa session.
	The model class names are created by appending the
	model name from the definition file to the prefix
	value (which defaults to "XSUM"); since Python class
	are expected to start with a capital letter the prefix
	must be capitalised (or, if blank, then the first
	character of the model name is capitalized).
      </PARA>
    </ADESC>

    <ADESC title="Changes in the scripts 4.15.0 (December 2022) release">
      <PARA>
	Support for models that use *.cpp files has been added, such as
	recent versions of relxill. The build system has been simplified
	which should reduce the time taken to build, and avoid possible
	issues with Sherpa and NumPy.
      </PARA>
    </ADESC>

    <ADESC title="Changes in the scripts 4.14.0 (December 2021) release">
      <PARA>
	The script has been updated to handle changes in XSPEC 12.12.0 (as it
	makes building packages easier) and in Sherpa. In particular the
	parsing of XSPEC model files is now handled by the
	sherpa.astro.utils.xspec.parse_xspec_model_description
	routine and the code generation relies on the
	sherpa.astro.utils.xspec.create_xspec_code routine,
	both new in Sherpa 4.14.0.
      </PARA>
      <PARA>
	Please contact the
	<HREF link="https://cxc.harvard.edu/helpdesk/">CXC HelpDesk</HREF>
	if you are unable to run the script with a local model.
      </PARA>
    </ADESC>

    <ADESC title="Changes in the scripts 4.13.0 (December 2020) release">
      <PARA>
	The script has been re-worked and added back to the
	contributed scripts package. Please contact the
	<HREF link="https://cxc.harvard.edu/helpdesk/">CXC HelpDesk</HREF>
	if you have problems. One major change is that the
	models should be imported using the model name plus ".ui";
	that is
      </PARA>
      <PARA>
	<SYNTAX>
	  <LINE>&spr; import mymodel.ui</LINE>
	</SYNTAX>
      </PARA>
      <PARA>
	whereas in previous versions you would have just imported the mymodel
	module.
      </PARA>
      <PARA title="No support for the lmod function">
	In earlier versions we provided a lmod functon which could load
	the module. Due to changes in how the module is built this
	functionality has been removed.
      </PARA>
      <PARA title="Convolution models">
	The code takes advantage of the support for XSPEC convolution
	models added in CIAO 4.13, which means that it no longer creates
	routines starting with load_xxx, but just lets you create
	the model components as any other model.
      </PARA>
    </ADESC>

    <ADESC title="Changes in the scripts 4.11.1 (December 2018) release">
      <PARA>
	The script has not been updated to work with XSPEC 12.10.0e
	(which is distributed as part of CIAO 4.11). Please contact the
	<HREF link="https://cxc.harvard.edu/helpdesk/">CXC HelpDesk</HREF>
	if you find this script useful.
      </PARA>
    </ADESC>

    <ADESC title="Changes in the scripts 4.9.2 (April 2017) release">
      <PARA>
        The script should now work with XSPEC convolution models.
      </PARA>
    </ADESC>

    <ADESC title="Changes in the scripts 4.9.1 (December 2016) release">
      <PARA>
	The script has been updated to work with CIAO 4.9 but has
	only seen very-limited testing. There is still no support
	for convolution models.
      </PARA>
    </ADESC>

    <ADESC title="Changes in the scripts 4.8.2 (January 2016) release">
      <PARA title="Support for models with an initialization string">
	XSPEC models which use an initialization string, such as the
	<HREF link="https://heasarc.gsfc.nasa.gov/docs/xanadu/xspec/models/snapec.html">snapec model</HREF>
	can now be converted.
      </PARA>
    </ADESC>

    <ADESC title="Changes in the scripts 4.8.1 (December 2015) release">
      <PARA>
	This script has not been updated to reflect changes made
	in Sherpa in this release. Please contact the
	<HREF link="https://cxc.harvard.edu/helpdesk/">CXC HelpDesk</HREF>
	if you need to use this script.
      </PARA>
    </ADESC>

    <ADESC title="Changes in the scripts 4.6.6 (September 2014) release">
      <PARA>
	The script is new in this release.
      </PARA>
    </ADESC>

    <ADESC title="Notes">
      <PARA>
	This script is not an official part of the CIAO release but is
	made available as "contributed" software via the
	<HREF link="https://cxc.harvard.edu/ciao/download/scripts/">CIAO scripts page</HREF>.
	Please see the
	<HREF link="https://cxc.harvard.edu/ciao/download/scripts/instructions.html">installation
	instructions page</HREF> for help on installing the package.
      </PARA>
    </ADESC>

    <BUGS>
      <PARA>
	See the
	<HREF link="https://cxc.harvard.edu/ciao/bugs/convert_xspec_user_model.html">bugs page
	for this script</HREF> on the CIAO website for an up-to-date
	listing of known bugs.
      </PARA>
    </BUGS>

    <LASTMODIFIED>December 2021</LASTMODIFIED>
  </ENTRY>
</cxchelptopics>
