# This is called chips_startup.tk for historical reasons (the CIAO
# installation uses this name and it is easier to keep than change
# for the time being) even though ChIPS is no-longer used by dax.

global env

# Need to make sure CIAO's paths are first
set env(PATH) $env(ASCDS_INSTALL)/bin:$env(PATH)

## Dax output directory setup
if { [info exists env(DAX_OUTDIR)] == 0 } {
    set env(DAX_OUTDIR) [exec -ignorestderr pget dax outdir]
}
file mkdir $env(DAX_OUTDIR)


proc ChangeDaxOutdir {} {
    global env
    set dir [tk_chooseDirectory -initialdir $env(DAX_OUTDIR) -title "DAX output directory" ]
    if { $dir ne "" } {
        set env(DAX_OUTDIR) $dir
        file mkdir $env(DAX_OUTDIR)
    }    
}


# Add a progress bar for long running processes

proc start_dax_progress { tnam } {    

  if { [exec -ignorestderr pget dax progress_bar] == "no"} {
    return   
  }

  set winnam "dax_"
  append winnam $tnam

  toplevel .${winnam}
  wm title .${winnam} "CIAO (DAX)"

  ttk::frame .${winnam}.dp
  grid .${winnam}.dp -row 0 -column 0
  ttk::label .${winnam}.dp.toolname -text $tnam
  grid .${winnam}.dp.toolname -padx 5 -pady 5 -row 0 -column 0 

  ttk::progressbar .${winnam}.dp.toolname_pb -mode indeterminate -max 15 
  grid .${winnam}.dp.toolname_pb -padx 5 -pady 5 -row 0 -column 1
  .${winnam}.dp.toolname_pb start
}

proc stop_dax_progress {tnam} {

  if { [exec -ignorestderr pget dax progress_bar] == "no"} {
    return   
  }

  set winnam "dax_"
  append winnam $tnam
  
  if { [winfo exists .${winnam}] } {
    .${winnam}.dp.toolname_pb stop
    destroy .${winnam}
  }
}



# --------- Setup for interactive tg coordinates

set tgcoords_arm 0
set tgcoords_tg_r 1
set tgcoords_tg_d 2
set tgcoords_energy 3
set tgcoords_order 1
set tgcoords_frame 0
set tgcoords_id 1

proc run_tgcoords { frame id } {
    # Process the magic grating region w/ special callbacks added.

    global ds9
    global tgcoords_order

    set frm [lindex $ds9(frames) $frame]
    set coords [$frm get marker $id line point physical]
    set x0 [lindex $coords 0]
    set y0 [lindex $coords 1]
    set x1 [lindex $coords 2]
    set y1 [lindex $coords 3]

    launch_tgcoords_ui $frame $id

    # I need to put this into the background so that the script,
    # ds9_itgcoords, can make XPA calls.  Otherwise, the Tk event loop is
    # hung at this command and the XPA command in ds9_itgcoords times out.  
    exec {ds9_itgcoords} $ds9(title) $tgcoords_order $x0 $y0 $x1 $y1 $frame $id &
}


proc launch_tgcoords_ui {frame id } {
    # The TK widget to display the results

    global tgcoords_frame 
    global tgcoords_id

    if {[winfo exists .tgcoords ]} {
        return
    }

    set tgcoords_frame $frame
    set tgcoords_id $id

    toplevel .tgcoords
    ttk::frame .tgcoords.frm
    pack .tgcoords.frm

    ttk::label .tgcoords.frm.arm_label -text {Grating Arm}
    ttk::label .tgcoords.frm.ord_label -text {Order}
    ttk::label .tgcoords.frm.tgr_label -text {TG_R [deg]}
    ttk::label .tgcoords.frm.tgd_label -text {TG_D [deg]}
    ttk::label .tgcoords.frm.eng_label -text {Energy [keV]}
    ttk::entry .tgcoords.frm.arm_value -textvariable tgcoords_arm 
    ttk::entry .tgcoords.frm.ord_value -textvariable tgcoords_order
    ttk::entry .tgcoords.frm.tgr_value -textvariable tgcoords_tg_r
    ttk::entry .tgcoords.frm.tgd_value -textvariable tgcoords_tg_d
    ttk::entry .tgcoords.frm.eng_value -textvariable tgcoords_energy

    grid .tgcoords.frm.arm_label -row 1 -column 1 -padx 5
    grid .tgcoords.frm.ord_label -row 2 -column 1 -padx 5
    grid .tgcoords.frm.tgr_label -row 3 -column 1 -padx 5
    grid .tgcoords.frm.tgd_label -row 4 -column 1 -padx 5
    grid .tgcoords.frm.eng_label -row 5 -column 1 -padx 5
    
    grid .tgcoords.frm.arm_value -row 1 -column 2 -padx 5
    grid .tgcoords.frm.ord_value -row 2 -column 2 -padx 5
    grid .tgcoords.frm.tgr_value -row 3 -column 2 -padx 5
    grid .tgcoords.frm.tgd_value -row 4 -column 2 -padx 5
    grid .tgcoords.frm.eng_value -row 5 -column 2 -padx 5

    bind .tgcoords.frm.ord_value <Return> {run_tgcoords $tgcoords_frame $tgcoords_id}
        
}


proc display_tgcoords { tgr tgd energy arm frame id} {
    # Update the display with the newly computed values

    global tgcoords_arm
    global tgcoords_tg_r
    global tgcoords_tg_d
    global tgcoords_energy

    set tgcoords_arm $arm
    set tgcoords_tg_r $tgr
    set tgcoords_tg_d $tgd
    set tgcoords_energy $energy

    if {[winfo exists .tgcoords ] == 0} {
        launch_tgcoords_ui $frame $id
    }
}

